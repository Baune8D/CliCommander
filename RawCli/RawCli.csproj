<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;netstandard2.1;net9.0</TargetFrameworks>
    <IsPackable>true</IsPackable>
    <IsTrimmable Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net6.0'))">true</IsTrimmable>
    <IsAotCompatible Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net7.0'))">true</IsAotCompatible>
  </PropertyGroup>

  <PropertyGroup>
    <Authors>Baune8D</Authors>
    <Description>Fork of CliWrap that enables outputting native process output at the cost of output redirection</Description>
    <PackageTags>shell pipe command line executable interface wrapper standard input output error arguments net core</PackageTags>
    <PackageProjectUrl>https://github.com/Baune8D/CliCommander</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="CliWrap" Version="3.7.0" />
    <PackageReference Include="CSharpier.MsBuild" Version="0.30.2" PrivateAssets="all" />
    <PackageReference Include="Microsoft.Bcl.AsyncInterfaces" Version="9.0.0" Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.1')) != true" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="8.0.0" PrivateAssets="all" />
    <PackageReference Include="PolyShim" Version="1.14.0" PrivateAssets="all" />
    <PackageReference Include="System.Threading.Tasks.Extensions" Version="4.5.4" Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.1')) != true" />
    <PackageReference Include="System.Management" Version="9.0.0" Condition="'$(TargetFrameworkIdentifier)' == '.NETStandard'" />
    <PackageReference Include="System.Memory" Version="4.6.0" Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard2.1')) != true" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
    <Reference Include="System.Management" />
  </ItemGroup>

  <!-- Non-linking dependency on the signaler project to ensure correct build order -->
  <ItemGroup>
    <ProjectReference Include="..\RawCli.Signaler\RawCli.Signaler.csproj">
      <GlobalPropertiesToRemove>TargetFramework</GlobalPropertiesToRemove>
      <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
      <CopyLocal>false</CopyLocal>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
    </ProjectReference>
  </ItemGroup>

  <!-- Embed the signaler executable inside the assembly -->
  <ItemGroup>
    <EmbeddedResource Include="../RawCli.Signaler/bin/$(Configuration)/net35/RawCli.Signaler.exe">
      <Link>Signaler.exe</Link>
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
      <Visible>false</Visible>
    </EmbeddedResource>
  </ItemGroup>

  <ItemGroup>
    <None Include="README.md" Pack="true" PackagePath="\" />
  </ItemGroup>

</Project>